en t'inspirant sur cette structure de maitre | esclave , et troi | fusion  :

sortm.c :
/*
 * file              : sortm.c
 * created by        : lemarch
 * creation date     : 01/12/98
 */
/* TP algorithmique parallele
 * maitrise
 * LL
 * 07/10/2017
 */

/* 
 * sortm.c
 * algorithme maitre
 * -- tri recursif & fusion
 */

#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include "pvm3.h"
#include "sort.h"

#define EPATH "/home/abdennourguessoum/Desktop/UBO/S2/PPHP/Lemarchand/PVM/PVM_Practical_Work/TP3/MSSortCorrige"


static pb_t *Q[PB];		/* la pile de problemes */
static int Q_nb;			/* l'index de tete de pile */

/*
 * remplit un tableau d'entiers aleatoirement
 * dans l'intervalle [0..99]
 * la taille du tableau est donnee
 * par DATA (cf sort.h)
 */
void set_random_data(data)
	int *data;
{
	int i;

	for (i=0; i<DATA; i++) 
		data[i] = rand()%100;
}

/*
 * initialise la file de problemes
 * chacun des PB problemes est un
 * probleme de tri de taille N
 * stocke dans le premier champ de
 * donnees de la structure.
 */

void init_queue(data)
	int *data;
{
	int i;

	for (i=0; i<PB; i++) {
		Q[i] = (pb_t *)malloc(sizeof(pb_t));
		Q[i]->taille1 = N;
		Q[i]->taille2 = 0;
		Q[i]->data1 = (int *)malloc(N*sizeof(int));
		copy_int(Q[i]->data1, data + i*N, N);
		Q[i]->data2 = NULL;
		Q[i]->type = PB_TRI;
	}
	Q_nb = PB;	
}

/*
 * empile ou depile dans la 
 * pile globale Q un probleme
 */

pb_t *depile()
{
	if (Q_nb > 0)
		return Q[--Q_nb];
	else
		return NULL;
}

void empile(pb)
	pb_t *pb;
{
	Q[Q_nb++] = pb;
}

/*
 * programme maitre
 */

int main(argc, argv)
	int argc; 
	char **argv;
{
	int i;
	int tids[P];		/* tids fils */
	int data[DATA];	/* donnees */
	pb_t *pb;			/* probleme courant */
	int sender[1];

	set_random_data(data);	/* initialisation aleatoire */
	init_queue(data);				/* initialisation de la pile */
	/* lancement des P esclaves */
	pvm_spawn(EPATH "/sorts", (char**)0, 0, "", P, tids);

	/* envoi d'un probleme (de tri) a chaque esclave */
	for (i=0; Q_nb>0 && i<P; i++)
		send_pb(tids[i], depile());

	while (1) {
		// a vous
		pb = receive_pb(-1, sender);
		if (pb->taille1 == DATA) break;

		empile(pb);
		pb = depile();
		if (pb->type == PB_TRI) 
			send_pb(*sender, pb);
		else {
			pb_t *pb2 = depile();
			if (pb2 == NULL) empile(pb);
			else {
				if (pb2->type == PB_TRI) {
					send_pb(*sender, pb2);
					empile(pb);
				}
				else {
					pb->taille2 = pb2->taille1;
					pb->data2 = pb2->data1;
					send_pb(*sender, pb);
					free(pb2);
				}
			}
		}
	}

	pvm_mcast(tids, P, MSG_END); /* fin esclaves */
	pb_print(pb);
	pb_free(pb);
	pvm_exit();
	exit(0);
}

sorts.c :
/* TP algorithmique parallele
 * maitrise
 * LL
 * 07/10/97
 */

/*
 * sorts.c
 * algorithme esclave
 * -- tri fusion maitre esclave
 */

 #include <stdio.h>
 #include <stdlib.h>
 #include <malloc.h>
 #include "pvm3.h"
 #include "sort.h"
 
 /*
  * trie un tableau de taille N
  * compare_int pour qsort
  */
 
 static int compare_int(a, b)
 int *a, *b;
 {
     return *a - *b;
 }
 void sort_data(pb_t *pb)
 {
     qsort(pb->data1, N, sizeof(int), compare_int);
     pb->type = PB_FUS;
 }
 
 /*
  * fusion (cf tp1)
  */
 
 void merge_data(pb)
     pb_t *pb;
 {
     int idx1, idx2, idx;
     int *data;
 
     data = (int *)malloc((pb->taille1 + pb->taille2) * sizeof(int));
     idx1 = idx2 = idx = 0;
 
     while (idx1 < pb->taille1 && idx2 < pb->taille2)
         if (pb->data1[idx1] < pb->data2[idx2])
             data[idx++] = pb->data1[idx1++];
         else
             data[idx++] = pb->data2[idx2++];
 
     while (idx1 < pb->taille1)
         data[idx++] = pb->data1[idx1++];
     while (idx2 < pb->taille2)
         data[idx++] = pb->data2[idx2++];
 
     free(pb->data1);
     pb->data1 = data;
     free(pb->data2);
     pb->data2 = NULL;
     pb->taille1 += pb->taille2;
     pb->taille2 = 0;
 }
 
 /*
  * programme esclave
  */
 
 int main()
 {
     extern pb_t *receive_pb();
     int parent, sender[1]; /* pere et envoyeur (non utilise) */
     pb_t *pb;			   /* probleme courant */
 
     parent = pvm_parent();
 
     /* tant que l'on recoit un probleme a traiter ... */
     while ((pb = receive_pb(parent, sender)) != 0)
     {
         if (pb->type == PB_TRI)
             sort_data(pb);
         else
             merge_data(pb);
         send_pb(parent, pb);
     }
 
     pvm_exit();
     exit(0);
 }

 
Realise notre TP :

L’objectif du TP est de construire l’enveloppe convexe haute d’un ensemble de points. L’algorithme est du
type diviser et conqu ́erir : la taille du probl`eme est r ́eduite jusqu’`a ce que une solution soit calculable simplement.
Ensuite la solution du probl`eme global est reconstruite `a partir des solutions interm ́ediaires.
Algorithme convexe(S)
Si | S |≤4
calculer l’enveloppe haute U H directement
Sinon
partitionner S en deux ensembles
S1 = { p1, . . . , pn/2 } et S2 = { pn/2+1, . . . , pn }
calculer l’enveloppe de S1, U H1 ← convexe(S1)
calculer l’enveloppe de S2, U H2 ← convexe(S2)
calculer la tangente commune `a U H1 et U H2
en d ́eduire U H
Mise en oeuvre
Les programmes fournis se trouvent dans le r ́epertoire /home/commun_depinfo/enseignants/lemarchand/M1-PVM/UH.
upper.c est le programme principal, calculant l’enveloppe convexe haute d’un nombre de points al ́eatoires donn ́e
en argument. Les points sont repr ́esent ́es par une liste chain ́ee bas ́ee sur la structure point. Le fichier point.c
contient les routines associ ́ees `a cette structure, et les fonctions de calcul d’enveloppe.
La structure point est d ́efinie dans point.h
• Proposer une parall ́elisation simple de l’algorithme `a partir de la solution s ́equentielle.
• Ecrire les routines de transfert de liste de points.
• Mettre en oeuvre une version parall`ele maitre-esclave.